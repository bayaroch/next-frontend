version: 0.2
phases:
  install:
    commands:
      - echo "Install Phase - Nothing to do using latest Ubuntu Docker Image"
  pre_build:
    commands:
      # Docker Image Tag with Date Time & Code Build Resolved Source Version
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      # Verify AWS CLI Version
      - echo "Verify AWS CLI Version..."
      - aws --version
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Login in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo "Login in to Amazon Public ECR..."
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config
      # Set environment variables
      - echo "REACT_APP_RECAPTCHA_KEY=${REACT_APP_RECAPTCHA_KEY}" >> .env
      - echo "REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}" >> .env
      - echo "REACT_APP_GOOGLE_CLIENT_SECRET=${REACT_APP_GOOGLE_CLIENT_SECRET}" >> .env
      - echo "REACT_APP_AUTH_API=${REACT_APP_AUTH_API}" >> .env
      - echo "REACT_APP_FIREBASE_CONFIG=${REACT_APP_FIREBASE_CONFIG}" >> .env

      - export NODE_OPTIONS=--max-old-space-size=8192
  build:
    commands:
      # Build Docker Image
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      - docker build -t pmt-frontend .
      - docker tag pmt-frontend:latest $REPOSITORY_URI:$TAG
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - export CERT_ARN=$CERT_ARN
      # Setup kubectl with our EKS Cluster
      - echo "Update Kube Config"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      # Apply changes to our Application using kubectl
      - echo "Apply changes to kube manifests"
      - CONTAINER_IMAGE=$REPOSITORY_URI:$TAG \
      - envsubst < ./manifests/service.yml | kubectl apply -f -
      - if [ "$PROD_STAGE" = "true" ]; then
        echo "Deploying to Prod environment...";
        envsubst < ./manifests/prod/ingress.yml | kubectl apply -f - ;
        else
        echo "Deploying to Dev environment...";
        envsubst < ./manifests/ingress.yml | kubectl apply -f - ;
        fi
      - echo "Completed applying changes to Kubernetes Objects"
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      - printf '[{"name":"service.yml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
artifacts:
  files:
    - build.json
    - kube-manifests/*
